#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pathname'
require 'English'

# path to your application root.
APP_ROOT = Pathname.new File.expand_path('../', __dir__)


# Monkey patching
# --------------------------------------------------------------------------------------------------

class String
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red;   colorize(31); end
  def green; colorize(32); end
end

def abort(msg)
  Kernel.abort("✖ #{msg}".red)
end

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end


# Helper methods
# --------------------------------------------------------------------------------------------------

def tag_is_on_current_commit?(tag)
  current_commit = `git rev-parse --verify HEAD`.strip
  `git rev-list -n 1 #{tag}`.include? current_commit
end

def versions_match?(v1, v2)
  v1.gsub(/^v/, '') == v2.gsub(/^v/, '')
end

def verify_no_uncommitted_changes!
  return if `git status -s`.strip.empty?

  abort('You have uncommited changes. Please commit or stash your changes before proceeding.')
end

def verify_command_passes!(name, cmd)
  puts "Running #{name}…"
  puts
  no_errors = system(cmd)
  puts

  if no_errors
    puts "✓ #{name.capitalize} pass".green
  else
    abort("#{name.capitalize} failed. Please address issues before proceeding.")
  end

  puts
end

def verify_react_dev_tools_are_not_included!(manifest)
  return unless manifest.include?('react-dev-tools.js')

  abort("Your manifest includes react-dev-tools.js; it must be removed before releasing.")
end

def verify_version!(version)
  latest_tag = `git describe --abbrev=0 --tags`.strip

  if tag_is_on_current_commit?(latest_tag)
    unless versions_match?(latest_tag, version)
      abort(
        "Your manifest version (#{version}) does not match the current git tag: #{latest_tag}.\n" \
        "Please update the version number in dist/manifest.json.",
      )
    end
  elsif versions_match?(latest_tag, version)
    abort(
      "Your manifest version (#{version}) matches an earlier release.\n" \
      "Please bump the version number in dist/manifest.json.",
    )
  end
end

def verify_application_state!(manifest, version)
  verify_no_uncommitted_changes!
  verify_command_passes! 'tests',   'yarn test'
  verify_command_passes! 'linters', 'yarn lint'
  verify_react_dev_tools_are_not_included!(manifest)
  verify_version!(version)
end


# The actual script
# --------------------------------------------------------------------------------------------------

Dir.chdir APP_ROOT do
  manifest = File.read('./dist/manifest.json')
  version  = manifest.match(/^\s*"version":\s*"(.+)"/)[1]

  verify_application_state!(manifest, version)

  puts "Creating v#{version} release…"

  <<-SCRIPT.each_line { |cmd| system!(cmd.strip) unless cmd.strip.empty? }
    rm -f dist/*.bundle.js*
    yarn run build:prod

    rm -f dist/react-dev-tools.js
      mkdir -p pkg
      zip -r -X pkg/projecthub-v#{version}.zip dist/
    git checkout -- dist/react-dev-tools.js

    git tag -f v#{version}
    git push origin v#{version}
  SCRIPT

  puts <<-MSG.gsub(/^ */, '').green

    ----------------------------------------------------------------------
    ✓ v#{version} built to pkg/projecthub-v#{version}.zip

    Go to https://chrome.google.com/webstore/developer/dashboard to upload
  MSG
end

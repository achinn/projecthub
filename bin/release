#!/usr/bin/env ruby

require 'pathname'

class String
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red;   colorize(31); end
  def green; colorize(32); end
end

def abort(msg)
  Kernel.abort(msg.red)
end

# path to your application root.
APP_ROOT = Pathname.new File.expand_path('../../', __FILE__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

def react_dev_tools_are_included?(manifest)
  manifest.include?('react-dev-tools.js')
end

def tag_is_on_current_commit?(tag)
  current_commit = `git rev-parse --verify HEAD`.strip
  `git rev-list -n 1 #{tag}`.include? current_commit
end

def versions_match?(v1, v2)
  v1.gsub(/^v/, '') == v2.gsub(/^v/, '')
end

def uncommitted_changes?
  !`git status -s`.strip.empty?
end

Dir.chdir APP_ROOT do
  if uncommitted_changes?
    abort('You have uncommited changes. Please commit or stash your changes before proceeding.')
  end

  latest_tag = `git describe --abbrev=0 --tags`.strip
  manifest   = File.read('./dist/manifest.json')
  version    = manifest.match(/^\s*"version":\s*"(.+)"/)[1]

  if react_dev_tools_are_included?(manifest)
    abort("Your manifest includes react-dev-tools.js; it must be removed before releasing.")
  end

  if tag_is_on_current_commit?(latest_tag)
    unless versions_match?(latest_tag, version)
      abort(
        "Your manifest version (#{version}) does not match the current git tag: #{latest_tag}.\n" \
        "Please update the version number in dist/manifest.json."
      )
    end
  elsif versions_match?(latest_tag, version)
    abort(
      "Your manifest version (#{version}) matches an earlier release.\n" \
      "Please bump the version number in dist/manifest.json."
    )
  end

  puts "Creating v#{version} release…"
  system!('rm -f dist/*.bundle.js*')
  system!('rm -f dist/react-dev-tools.js')
  system!('yarn run build:prod')
  system!("mkdir -p pkg")
  system!("zip -r -X pkg/projecthub-v#{version}.zip dist/")
  system!('git checkout -- dist/react-dev-tools.js')
  system!("git tag -f v#{version}")
  system!("git push origin v#{version}")

  puts <<-MSG.gsub(/^ */, '').green

    ----------------------------------------------------------------------
    ✓ v#{version} built to pkg/projecthub-v#{version}.zip

    Go to https://chrome.google.com/webstore/developer/dashboard to upload
  MSG
end
